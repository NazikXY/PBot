from threading import Thread
from time import sleep

from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from auth import TOKEN
from config import *
from reporting import *
import logging
from DbHandler import DBHandler
import re

# TODO –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–¥, —Ä–∞–±–æ—Ç—É  —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∫—É—Ö–Ω–∏ –∏ –ø—Ä–æ—á–µ–≥–æ


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


db = DBHandler('bot.db')

class PlaceHolder:
    place = None
    table = 0
    category = None
    product = None

    def __init__(self, place):
        self.place = place

class Holder:
    places = {
        KITCHEN : PlaceHolder(KITCHEN),
        BAR : PlaceHolder(BAR),
        ZEH : PlaceHolder(ZEH),
        Z_6 : PlaceHolder(Z_6)
    }


# def hidden_process():
#     while True:
#         db.close_old_order()
#         sleep(60)


def start(update, context):
    text = '–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?'
    buttons = [[InlineKeyboardButton('–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', callback_data=str(REPORTING)),
                # InlineKeyboardButton ('–ü—Ä–∏—Ö–æ–¥', callback_data=str (REPORTING)),
                # InlineKeyboardButton ('–°–ø–∏—Å–∞–Ω–∏–µ', callback_data=str (REPORTING)),
                InlineKeyboardButton('–ë–∞–∑–∞—Ä', callback_data=str(ORDERS_START))]]
    kb = InlineKeyboardMarkup(buttons)
    # Thread(target=hidden_process, daemon=True).start()


    # –µ—Å–ª–∏ /start –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–ø—É–∫–∞–µ—Ç—Å—è, —Ç–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç try
    try:
        update.callback_query.answer()
        update.callback_query.edit_message_text(text, reply_markup=kb)
    except Exception as e:
        update.message.reply_text(text, reply_markup=kb)

    return START

def text_order_list(order) :

    result = '\n'

    if order is not None:
        for i in order:
            product = db.get_goods_by_id(i[0])
            if product is None:
                continue
            result += product[1] + ' ' + str(i[1]) +' '+ product[2] +'\n'


    def str_sort(st):
        tmp = st.splitlines()
        tmp.sort()
        rs = ''
        for line in tmp:
            rs += line + '\n'
        return rs

    result = str_sort(result)
    #
    # kitchen_txt = '\n\n**–ö—É—Ö–Ω—è** \n\n' #+ str_sort(kitchen_txt)
    # bar_txt = '\n** –ë–∞—Ä ** \n\n'# + str_sort(bar_txt)
    # zeh_txt = '\n** –¶–µ—Ö ** \n\n'# + str_sort(zeh_txt)
    #
    # result = kitchen_txt + bar_txt + zeh_txt

    return result


def orders_start(update, context):
    pass
#
#     order_is_present = db.order_is_present()
#     order = None
#     if order_is_present:
#         text, order = db.get_current_order()
#         places = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data=str(SELECTING_PLACE))],
#                   [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=str(CLOSING_ORDER)),
#                    InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=str(DELETING_ORDER))],
#                   [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(START))]]
#     else:
#         places = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=str(CREATING_ORDER)),
#                    InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏", callback_data=str(HISTORY))
#                    ],
#                   [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(START))]]
#         text = "–°–µ–π—á–∞—Å —É –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–∞"
#
#     goods_list = db.get_goods_list_by_category()
#
#     all_text = text_order_list(goods_list, order)
#
#     text = all_text + '–í–∞—à –∑–∞–∫–∞–∑: ' + text
#     kb = InlineKeyboardMarkup(places)
#
#     # –µ—Å–ª–∏ /start –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–ø—É–∫–∞–µ—Ç—Å—è, —Ç–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç try
#     try:
#         update.callback_query.answer()
#         update.callback_query.edit_message_text(text, reply_markup=kb)
#     except Exception as e:
#         update.message.reply_text(text, reply_markup=kb)
#
#     return ORDERS_START


def add_to_order(update, context):
    places = [[InlineKeyboardButton("–ö—É—Ö–Ω—è", callback_data=str(KITCHEN)),
               InlineKeyboardButton("–ë–∞—Ä", callback_data=str(BAR)),
               InlineKeyboardButton("–¶–µ—Ö", callback_data=str(ZEH)),
               InlineKeyboardButton("–¶-6", callback_data=str(Z_6)),
               ],
              [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data=str(START))]
              ]
    kb = InlineKeyboardMarkup(places)

    update.callback_query.answer()
    update.callback_query.edit_message_text('–ö—É–¥–∞? ', reply_markup=kb)

    return SELECTING_PLACE

def delete_from_order(update, context):
    command, place = update.callback_query.data.split(';')
    table_name, order = db.get_order(place)
    button_list = []

    for i in order:
        button_list.append(InlineKeyboardButton(db.get_goods_name_by_id(i[0]) + " ‚ûñ", callback_data=str(DELETE_FROM_ORDER)+';'+str(i[0])+';'+str(place)))
    buttons = make_pairlist_from_list(button_list)
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(place))])

    kb = InlineKeyboardMarkup(buttons)

    update.callback_query.answer()
    update.callback_query.edit_message_text('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?', reply_markup=kb)


def delete_order_item(update, context):
    command, id, place = update.callback_query.data.split(';')
    update.callback_query.answer()
    db.delete_from_order_by_id(place, id)
    return



def create_order(update, context):
    buttons = [[InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data=str(END))]]
    kb = InlineKeyboardMarkup(buttons)

    new_order = db.create_order()

    update.callback_query.answer()

    if not new_order[1]:
        update.callback_query.edit_message_text(
            '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. \n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–µ–∫—É—â–∏–π, —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑: ' + new_order[0],
            reply_markup=kb)
    else:
        update.callback_query.edit_message_text(
            '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ' + new_order[0], reply_markup=kb)


def delete_order(update, context):
    # db.delete_order()
    return orders_start(update, context)


def change_order(update, context):
    order_list = db.get_order_list()
    orders = []
    for i in order_list:
        orders.append([InlineKeyboardButton(str(i[0]) + ' ' + i[1], callback_data=str(HISTORY) + str(i[0]))])
    orders.append([InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data=str(END))])
    kb = InlineKeyboardMarkup(orders)

    update.callback_query.answer()
    update.callback_query.edit_message_text("–ü—Ä–æ—à–ª—ã–µ –∑–∞–∫–∞–∑—ã: ", reply_markup=kb)



def choose_old_order(update, context):
    db.set_current_order_from_history(int(update.callback_query.data))

    update.callback_query.answer()
    return orders_start(update, context)


def close_order(update, context):
    command, place = update.callback_query.data.split(';')
    db.close_order(place)
    buttons = [[InlineKeyboardButton("–û–∫–µ–π", callback_data=str(place))]]

    kb = InlineKeyboardMarkup(buttons)


    update.callback_query.answer()
    update.callback_query.edit_message_text(text='–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç, –Ω–∞–≤–µ—Ä–Ω–æ–µ', reply_markup=kb)



def send_order(update, context):
    pass
    # TODO


def make_pairlist_from_list(gl):
    f = []
    s = []
    flag = 0
    res = []
    for i in gl:
        if flag:
            f.append(i)
            flag = 0
        else:
            s.append(i)
            flag = 1
    while True:
        if len(f) + len(s) <= 0:
            break
        tmp = []
        if len(f) > 0:
            tmp.append(f.pop())
        if len (s) > 0:
            tmp.append (s.pop ( ))
        res.append (tmp)
    return res


def choose_category(update, context, place=None):
    place_names = {KITCHEN: '–ö—É—Ö–Ω—è\n',
                  BAR:'–ë–∞—Ä\n',
                  ZEH:'–¶–µ—Ö\n',
                  Z_6:'–¶-6\n'}
    order_name, order = db.get_order(place.place)
    text = text_order_list(order)
    print(text)

    buttons = [
        [
            InlineKeyboardButton("–û–≤–æ—â–∏ üçÜü•ïü•î", callback_data=str(VEGS)+';'+str(place.place)),
            InlineKeyboardButton("–§—Ä—É–∫—Ç—ã üçâüçéüçá", callback_data=str(FRUIT)+';'+str(place.place)),
            InlineKeyboardButton("–ó–µ–ª–µ–Ω—å üåø", callback_data=str(GREENS)+';'+str(place.place)),
            InlineKeyboardButton("–ú—è—Å–Ω–æ–µ üçñ", callback_data=str(MEAT)+';'+str(place.place))
        ],
        [
            InlineKeyboardButton("–û—Ä–µ—Ö–∏/—Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã üå∞", callback_data=str(NUTS_DRIED_FRUIT)+';'+str(place.place)),
            InlineKeyboardButton("–ú–æ–ª–æ—á–Ω–æ–µ ü•õ", callback_data=str(MILK)+';'+str(place.place)),
            InlineKeyboardButton("–ù–∞–ø–∏—Ç–∫–∏ üßÉ", callback_data=str(DRINK)+';'+str(place.place))
        ],
        [
            InlineKeyboardButton ("–£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞ ‚ùå", callback_data=str (DELETE_FROM_ORDER) + ';' + str(place.place)),
            InlineKeyboardButton ("–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑! ‚úÖ", callback_data=str(CLOSING_ORDER)+';'+place.place)
        ],
        [
            InlineKeyboardButton ("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(END)),
        ]
    ]

    kb = InlineKeyboardMarkup(buttons)

    update.callback_query.answer()
    update.callback_query.edit_message_text(place_names[place.place] + text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=kb)



def make_goods_buttons(category, place):
    goods = []
    gl = db.get_goods_list_by_category(category)
    res = make_pairlist_from_list (gl)
    for pair in res :
        IKB_pair = []
        for item in pair :
            IKB_pair.append (InlineKeyboardButton (item[1], callback_data=str(item[0])+';'+str(category)+';'+str(place)))
        goods.append (IKB_pair)
    return goods

def make_goods_buttons_for_delete(category, place):
    goods = []
    gl = db.get_goods_list_by_category(category)
    res = make_pairlist_from_list (gl)
    for pair in res :
        IKB_pair = []
        for item in pair :
            IKB_pair.append (InlineKeyboardButton (item[1], callback_data=str(DELETE_POSITION)+';'+str(item[0])+';'+str(category)+';'+str(place)))
            print(str(DELETE_POSITION)+';'+str(item[0])+';'+str(category)+';'+str(place))
        goods.append (IKB_pair)
    return goods

def select_place(update, context):

    place = update.callback_query.data
    if Holder.places[place].table is None:
        buttons = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=str(CREATING_ORDER) + str(place))],
                   [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(END))]]
        kb = InlineKeyboardMarkup(buttons)
        update.callback_query.answer()
        update.callback_query.edit_message_text("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π", reply_markup=kb)
    else: return choose_category(update, context, place=Holder.places[place])



def select_goods(update, context):
    data = update.callback_query.data
    categ, place = data.split(';')
    place_names = {KITCHEN : '–ö—É—Ö–Ω—è\n',
                   BAR : '–ë–∞—Ä\n',
                   ZEH : '–¶–µ—Ö\n',
                   Z_6 : '–¶-6\n'}
    order_name, order = db.get_order (place)
    text = text_order_list (order)
    print(categ)
    print(place)
    goods = make_goods_buttons(categ, place)

    goods.append([InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üõ†", callback_data=str(HANDLE_POSITION)+';'+str(categ)+';'+str(place)),
                  InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(place))])

    kb = InlineKeyboardMarkup(goods)

    update.callback_query.answer()
    update.callback_query.edit_message_text(place_names[place] + text + "–ó–∞–∫–∞–∑: ", reply_markup=kb)

    return SELECTING_PLACE


def product_handler(update, context):
    gid, categ, place = update.callback_query.data.split(';')

    buttons = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(categ)+';'+str(place))]]
    kb = InlineKeyboardMarkup(buttons)
    context.user_data['gid'] = gid
    context.user_data['categ'] = categ
    context.user_data['place'] = place

    update.callback_query.answer()
    try:
        current_product = db.get_goods_by_id(gid)
        update.callback_query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {} {} –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å\n–ß—Ç–æ –±—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ —Å –º–∏–Ω—É—Å–æ–º ( -5, -7)"
                .format(current_product[2] , current_product[1]), reply_markup=kb)
    except Exception as e:
        print(e)

    return TYPING_COUNT

def product_deleter(update, context):
    command, product, categ, place = update.callback_query.data.split(';')
    butons = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=command+';'+categ+';'+place)]]
    update.callback_query.answer()
    db.delete_from_goods(product)


    # for i in dir(update.callback_query.message):
    #     print(eval("update.callback_query.message."+i))
    update.callback_query.edit_message_text("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=InlineKeyboardMarkup(butons))


def add_goods_count(update, context):
    data = update.message.text
    res = re.match(r'^\s*-*((\d+\.+\d{1,2})|(\d+))\s*$', data)

    if res is not None:
        gid = context.user_data['gid']
        categ = context.user_data['categ']
        place = context.user_data['place']
        count = res[0]
        current_product = db.get_goods_by_id(gid)
        try:
            db.add_to_order(gid=gid, category=categ, place=place, count=count)
            s_mes = context.bot.send_message (update.message.chat_id,
                                              count + ' ' + current_product[2] + ' ' + current_product[1] + " –ì–æ—Ç–æ–≤–æ!")

            def message_deleter(cont) :
                cont.bot.delete_message (update.message.chat_id, update.message.message_id)
                cont.bot.delete_message (update.message.chat_id, s_mes['message_id'])

            context.job_queue.run_once (message_deleter, DELETE_MESSAGE_PAUSE - 2)

        except Exception as e:
            print(e)


def returning(update, context):

    update.callback_query.answer()
    select_goods(update, context)

    return SELECTING_PLACE

def handle_position(update, context):
    text = "–î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    command, categ, place = update.callback_query.data.split (';')

    buttons = [[
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=str(ADD_NEW_POSITION)+';'+str(categ)+';'+str(place)),
        InlineKeyboardButton("—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=str(DELETE_POSITION)+';'+str(categ)+';'+str(place))],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(categ)+';'+str(place))]
    ]
    kb = InlineKeyboardMarkup(buttons)

    update.callback_query.answer()
    update.callback_query.edit_message_text (text=text, reply_markup=kb)


def add_new_position(update, context):
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ, –∫–≥."
    command ,categ, place = update.callback_query.data.split(';')
    context.user_data['categ'] = categ
    context.user_data['place'] = place

    buttons = [[
        InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è",    callback_data=str(categ)+';'+str(place))
    ]]
    kb = InlineKeyboardMarkup(buttons)

    update.callback_query.answer ( )
    update.callback_query.edit_message_text (text=text, reply_markup=kb)

    return TYPING

def delete_position(update, context):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "
    command, categ, place = update.callback_query.data.split(';')
    goods = make_goods_buttons_for_delete(categ, place)
    goods.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=str(categ)+';'+str(place))])

    kb = InlineKeyboardMarkup(goods)
    update.callback_query.answer ( )
    update.callback_query.edit_message_text (text=text, reply_markup=kb)

    return SELECTING_PLACE




def new_position_handler(update, context):
    data = update.message.text
    if re.match(r'^(\s*\w+\s*)+,(\s*\w+\.*)+\s*$', data) is not None:
        name, units = data.split(',')
        try:
            db.add_to_goods(name.strip(), units.strip(), context.user_data['categ'])
            # context.user_data['categ'] = None
            s_mes = context.bot.send_message (update.message.chat_id,
                                              '–ü–æ–∑–∏—Ü–∏—è "' + name.strip() + '" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')

        except Exception as e:
            if str(e) == 'UNIQUE constraint failed: goods.name':
                text = '–û—à–∏–±–∫–∞.\n–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ'
            else:
                text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É'
            print("Oopse, someth wrong \n" + str(e)+ str(e.args))
            s_mes = context.bot.send_message (update.message.chat_id, text)

        def message_deleter(cont) :
            cont.bot.delete_message (update.message.chat_id, update.message.message_id)
            cont.bot.delete_message (update.message.chat_id, s_mes['message_id'])

        context.job_queue.run_once(message_deleter, DELETE_MESSAGE_PAUSE)

    else:
        er_mes = context.bot.send_message(update.message.chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!')

        def message_deleter(cont) :
            cont.bot.delete_message (update.message.chat_id, update.message.message_id)
            cont.bot.delete_message (update.message.chat_id, er_mes['message_id'])

        context.job_queue.run_once (message_deleter, DELETE_MESSAGE_PAUSE)


def stop(update, context):
    pass


def cleaner(update, context):
    context.bot.delete_message(update.message.chat_id, update.message.message_id)
    for i in range(3, update.message.message_id):
        try:
            context.bot.delete_message(update.message.chat_id, update.message.message_id-i-1)
        except Exception as e:
            pass


def main():
    updater = Updater(TOKEN, use_context=True)

    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            START: [CallbackQueryHandler(add_to_order,              pattern='^' + str(ORDERS_START)+'$'),
                    CallbackQueryHandler(reporting,                 pattern='^' + str(REPORTING)+'$')],

            REPORTING: [CallbackQueryHandler(get_report,            pattern='^' + str(GET_REPORT)+'$'),
                        CallbackQueryHandler(get_report_xlsx,       pattern='^' + str(GET_REPORT_XLSX)+'$'),
                        CallbackQueryHandler(reporting,             pattern='^' + str(REPORTING)+'$'),
                        CallbackQueryHandler(deep_report,           pattern='^' + str (KITCHEN_REPORT) +
                                                                            '|' + str(BAR_REPORT) +
                                                                            '|' + str(ZEH_REPORT) + '$'),
                        CallbackQueryHandler(start,                 pattern='^' + str(START)+'$')],

            ORDERS_START: [CallbackQueryHandler(create_order,       pattern='^' + str(CREATING_ORDER)+'$'),
                           CallbackQueryHandler(change_order,       pattern='^' + str(HISTORY) + '$'),
                           CallbackQueryHandler(delete_order,       pattern='^' + str(DELETING_ORDER)+'$'),
                           CallbackQueryHandler(choose_old_order,   pattern='^' + str(HISTORY) + '\d*$'),
                           CallbackQueryHandler(close_order,        pattern='^' + str(CLOSING_ORDER)+'$'),
                           CallbackQueryHandler(add_to_order,       pattern='^' + str(SELECTING_PLACE) + '$'),
                           CallbackQueryHandler(start,              pattern='^' + str(START)+'$'),
                           CallbackQueryHandler(orders_start,       pattern='^' + str(END)+'$')],

            SELECTING_PLACE: [CallbackQueryHandler(select_place,    pattern='^' + reg_place_str+'$'),
                              CallbackQueryHandler(close_order,     pattern='^' + str(CLOSING_ORDER) + ';+'+reg_place_str+'$'),
                              CallbackQueryHandler(select_goods,    pattern='^' + reg_category_str+';+'+reg_place_str+'$'),
                              CallbackQueryHandler(add_to_order,    pattern='^' + str(END)+'$'),
                              CallbackQueryHandler(delete_from_order,    pattern='^' + str(DELETE_FROM_ORDER)+';+'+reg_place_str+'$'),
                              CallbackQueryHandler(delete_order_item,    pattern='^' + str(DELETE_FROM_ORDER)+';+'+'\d+'+';+'+reg_place_str+'$'),
                              CallbackQueryHandler(start,    pattern='^' + str(START)+'$'),
                              CallbackQueryHandler(product_handler, pattern='^\d+'
                                                                            + ';+'
                                                                            + reg_category_str
                                                                            + ';+'
                                                                            + reg_place_str + '$'),
                              CallbackQueryHandler(product_deleter, pattern='^'+str(DELETE_POSITION)
                                                                            + ';+'
                                                                            + '\d+' ## number
                                                                            + ';+'
                                                                            + reg_category_str
                                                                            + ';+'
                                                                            + reg_place_str+'$'),
                              CallbackQueryHandler(handle_position,
                                                   pattern='^' + str(HANDLE_POSITION)+';+'+reg_category_str+';+'+reg_place_str+'$'),
                              CallbackQueryHandler(add_new_position,
                                                   pattern='^' + str(ADD_NEW_POSITION)+';+'+reg_category_str+';+'+reg_place_str+'$'),
                              CallbackQueryHandler(delete_position,
                                                   pattern='^' + str(DELETE_POSITION)+';+'+reg_category_str+';+'+reg_place_str+'$')
                              ],

            TYPING_COUNT:[MessageHandler(Filters.text & ~Filters.command, add_goods_count),
                          CallbackQueryHandler(select_goods,        pattern='^'+reg_category_str+';+'+reg_place_str+'$')
                          ],

            TYPING: [MessageHandler(Filters.text & ~Filters.command, new_position_handler),
                     CallbackQueryHandler(select_goods,             pattern='^'+reg_category_str+';+'+reg_place_str+'$')]
        },
        fallbacks=[CommandHandler("stop", stop)]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler('clear', cleaner))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()

